version: '3.9'
services:

  redis:
    container_name: user_management_redis
    image: redis:7.2.3-alpine3.18
    networks:
      - user_management
    restart: always
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - .local/services/redis:/var/lib/redis/data
    init: true
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  db:
    container_name: user_management_db
    image: postgres:16.0
    networks:
      - user_management
    restart: always
    ports:
      - '${DB_PORT}:5432'
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - .local/services/db:/var/lib/postgresql/data
    init: true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  localstack:
    container_name: user_management_localstack
    image: localstack/localstack:1.4.0
    ports:
      - "${LOCALSTACK_PORT}:4566"
    volumes:
      - .local/services/localstack:/var/lib/localstack/
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:4566/_localstack/health" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

    networks:
      - user_management

  rabbitmq:
    container_name: user_management_rabbitmq
    image: rabbitmq:3.12.12-management-alpine
    networks:
      - user_management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - .local/services/rabbitmq:/var/lib/rabbitmq
      - .local/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    init: true
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 10s
      retries: 5

  webapp:
    build:
      args:
        - PIP_VERSION=${PIP_VERSION:-23.3.1}
        - POETRY_VERSION=${POETRY_VERSION:-1.6.1}
        - PYTHON_VERSION=${PYTHON_VERSION:-3.12.1}
        - VERSION=${WEBAPP_VERSION:-dev}
      context: .
    container_name: user_management_webapp
    image: user_management_webapp:latest
    env_file:
      - .env
    networks:
      - user_management
    ports:
      - "8000:8000"
    volumes:
      - .local/services/webapp:/app/:ro
    init: true
    depends_on:
      db:
        condition: service_healthy

networks:
  user_management:
    name: user_management_network
    driver: bridge
